unsafe_services = "{ ssh, telnet, http, https }"

wan_if = "em0.666"
nated_if = "tun0"
lan_ifs = "{ em0.1337, em0.2048, em0.69 }"
traffic_shapping_interco_if = "em0.38"

localnet = "10.82.0.0/21"

seitokai = "10.82.0.0/24"
daigurren = "10.82.1.0/24"
userkun = "10.82.2.0/23"

vpn_server_public_ip = "62.210.83.83"
vpn_server_local_ip = "10.10.10.1"
vpn_client = "10.10.10.2"

captive_portal = "10.82.0.66"
http_services = "{10.82.0.65, 10.82.0.66}"


dns_server="10.82.0.32"


# nat traffic stopping at vpn serveur (which won't go through vpn)
nat on $wan_if from $localnet to $vpn_server_public_ip -> ($wan_if)
# nat traffic from localnet to vpn
nat on $nated_if from $localnet to any -> ($nated_if)
nat on em0.1337 from $localnet to $dns_server -> (em0.1337)

# redirect non connected user using httP to captive portal
rdr on $traffic_shapping_interco_if proto tcp from !<authorized_users> to !10.82.0.1/24 port http -> $captive_portal port http
# redirect dns traffic to our server
rdr proto udp from $userkun to any port 53 -> $dns_server


block all
# allow oxygen to do anything
pass quick from { self,  $vpn_client } to any


# routing rules

pass from $localnet to any

block from $userkun to any

pass from <authorized_users> to any

## deny ssh from userkun and http connection to local web services
block return proto tcp from $userkun to $localnet port $unsafe_services
## allow access to web services provided to authed users
pass proto tcp from $userkun to $http_services port { http, https }
pass proto udp from any to any port 53

# allow external ssh connection to oxygen
pass proto tcp from $vpn_server_local_ip to $vpn_client port 22

